name: CI

on:
  push:
    branches:
      - main

jobs:
  ci:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installing dependencies
        run: yarn install

      - name: Package
        run: yarn dist

      - name: Read .env File
        id: dotenv
        uses: falti/dotenv-action@v0.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{steps.dotenv.outputs.terraform_version}}

      - name: Terraform Init
        id: init
        run: terraform init -no-color
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Build & ECR Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: techpivot-streaming-slack-notify-ecr
          NODE_VERSION: ${{steps.dotenv.outputs.node_version }}
        run: |
          docker build --platform linux/arm64 --build-arg DOCKER_REPO="arm64v8/node" --build-arg NODE_VERSION=$NODE_VERSION -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          # Technically this won't work since we don't expose excess capacity from spot fleet + task def
          aws ecs update-service --cluster techpivot-streaming-slack-notify-ecs-cluster --service techpivot-streaming-slack-notify-ecs-service --force-new-deployment
